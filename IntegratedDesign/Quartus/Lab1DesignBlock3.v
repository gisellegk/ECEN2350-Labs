//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Lab1DesignBlock3(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================


reg [3:0] INPUT_1;
reg [3:0] INPUT_0;

wire [3:0] ABS_1;
wire [3:0] ABS_0;

reg [9:0] LED_OUTPUT;
reg GREATER_THAN;
reg LESS_THAN;
reg EQUAL_TO;

wire [3:0] ONE;
wire [3:0] ZERO;

wire SIGN_1;
wire SIGN_0;
reg S_1;
reg S_0;
//=======================================================
//  Structural coding
//=======================================================
assign LEDR[2] = EQUAL_TO; 
assign LEDR[1] = GREATER_THAN;
assign LEDR[0] = LESS_THAN;

assign ONE = INPUT_1;
assign ZERO = INPUT_0;

assign SIGN_0 = S_0;
assign SIGN_1 = S_1;

twoscompval abs1(SW[7:4], ABS_1);
twoscompval abs0(SW[3:0], ABS_0);

sevensegment inst_1SIGN(4'b0, 1'b1, 1'b0, ~SIGN_1, HEX5);
sevensegment inst_1(ONE, 1'b0, 1'b0, 1'b0, HEX4);

sevensegment inst_0SIGN(4'b0, 1'b1, 1'b0, ~SIGN_0, HEX1);
sevensegment inst_0(ZERO, 1'b0, 1'b0, 1'b0, HEX0);

//disable middle 2 displays
sevensegment off_1(4'b0, 1'b1, 1'b0, 1'b1, HEX2);
sevensegment off_0(4'b0, 1'b0, 1'b0, 1'b1, HEX3);


always @ (SW[9:8]) begin
	if( SW[9:8] == 2'b10) begin
		//interpret as unsigned values
		INPUT_0 = SW[3:0];
		INPUT_1 = SW[7:4];
		S_0 = 1'b0;
		S_1 = 1'b0;
		if(SW[7:4]<SW[3:0]) begin
			//Turn on LED 0 and turn off other leds
			LESS_THAN = 1;
			GREATER_THAN = 0;
			EQUAL_TO = 0; end
		else if (SW[7:4]<SW[3:0]) begin
			//turn on LED 1 and turn off other leds
			GREATER_THAN = 1;
			EQUAL_TO = 0;
			LESS_THAN = 0; end
		else if (SW[7:4]==SW[3:0])begin
			//turn on LED 2 and turn off other leds
			EQUAL_TO = 1;
			GREATER_THAN = 0;
			LESS_THAN = 0; end
	
	end else if ( SW[9:8] == 2'b11) begin
		//interpret as 2s comp entry
		INPUT_0[3:0] = ABS_0[3:0];
		INPUT_1[3:0] = ABS_1[3:0];
		S_0 = SW[3];
		S_1 = SW[7];
		if (SW[7:4]==SW[3:0])begin
			//turn on LED 2 and turn off other leds
			EQUAL_TO = 1;
			GREATER_THAN = 0;
			LESS_THAN = 0; end
		else if(SW[7]==1 && SW[3] == 0)begin //input 1 is negative and 2 is posative
			//turn on LED 1 and turn off other leds
			GREATER_THAN = 0;
			EQUAL_TO = 0;
			LESS_THAN = 1; end 
		else if(SW[7]==0 && SW[3] == 1)begin //input 2 is negative and 1 is posative
			//turn on LED 0 and turn off other leds
			GREATER_THAN = 1;
			EQUAL_TO = 0;
			LESS_THAN = 0; end 
		else if( SW[7]== 1 && SW[3] == 1)begin //when both negative
			if(SW[6:4]<SW[2:0]) begin //when input 1 is greater than input 2
				//Turn on LED 1 and turn off other leds
				LESS_THAN = 1;
				GREATER_THAN = 0;
				EQUAL_TO = 0; end
			else if (SW[7:4]<SW[3:0]) begin //when input 2 is greater than input 1
				//turn on LED 0 and turn off other leds
				GREATER_THAN = 1;
				EQUAL_TO = 0;
				LESS_THAN = 0; end
		end else if( SW[7]== 0 && SW[3] == 0)begin //when both posative
			if(SW[6:4]<SW[2:0]) begin //when input 2 is greater than input 1
				//Turn on LED 0 and turn off other leds
				LESS_THAN = 1;
				GREATER_THAN = 0;
				EQUAL_TO = 0; end
			else if (SW[7:4]<SW[3:0]) begin //when input 1 is greater than input 2
				//turn on LED 1 and turn off other leds
				GREATER_THAN = 1;
				EQUAL_TO = 0;
				LESS_THAN = 0; end
		end //this may be an extra end
	end 
end


endmodule
